# Set up the database
## module core
odin.sql.file (module.path.join ../Schema/core/000-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/core/002-add-merge-account.blue.sql)

## module authn
odin.sql.file (module.path.join ../Schema/authn/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/002-fix-login.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/004-not-allow-merge-registered-to-guest.blue.sql)
## module email
odin.sql.file (module.path.join ../Schema/opts/email/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/email/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/email/004-merge-account-function.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/email/005-email-not-unique.blue.sql)
## module opts/apple
odin.sql.file (module.path.join ../Schema/opts/apple/001-initial.blue.sql)
## module opts/facebook
odin.sql.file (module.path.join ../Schema/opts/facebook/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/facebook/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/facebook/004-merge-account-function.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/facebook/005-facebook-credentials-insert.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/facebook/006-not-allow-merge-registered-to-guest.blue.sql)
## module opts/full-name
odin.sql.file (module.path.join ../Schema/opts/full-name/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/full-name/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/full-name/004-merge-account-function.blue.sql)
## module opts/google
odin.sql.file (module.path.join ../Schema/opts/google/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/google/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/google/004-merge-account-function.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/google/005-google-credentials-insert.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/google/006-not-allow-merge-registered-to-guest.blue.sql)

setting odin "Facebook API Endpoint" "https://graph.facebook.com/v3.2"
setting odin "Facebook" {
    "main": "111111111111111",
    "allowed": ["111111111111111", "222222222222222"]
}
setting odin "Google" {
    "Client_ID": ["111111111111111", "222222222222222"]
}

GET odin/test/facebook/validate_login /count-users 200 {"count": 0}
GET odin/test/facebook/validate_login /count-facebook-users 200 {"count": 0}

setting webserver views/odin/test/facebook/login {
    "view": "odin.facebook.login",
    "configuration": {
        "expires": {
            "hours": 72
        }
    }
}

expect GET https://graph.facebook.com/me/ids_for_business?access_token=user_1 200 {
    "data": [
        {
            "id": "112233445566778",
            "app": {
                "category": "Business",
                "link": "https://caveman-club/",
                "name": "Caveman Club",
                "id": "111111111111111"
            }
        }
    ]
}
expect GET https://graph.facebook.com/me?access_token=user_1&fields=name,email 200 {
    "name": "Fred Flintstone",
    "email": "user_1@example.com",
    "id": "112233445566778"
}
POST odin/test/facebook/login / {"access_token": "user_1"} 200

expect GET https://graph.facebook.com/me/ids_for_business?access_token=WRONG_ACCESS_TOKEN 400 {
    "error": {
        "message": "Malformed access token ACCESS_TOKEN",
        "type": "OAuthException",
        "code": 190,
        "fbtrace_id": "xxxxxxxx"
    }
}
POST odin/test/facebook/login / {"access_token": "WRONG_ACCESS_TOKEN"} 501

GET odin/test/facebook/validate_login /count-users 200 {"count": 1}
GET odin/test/facebook/validate_login /count-facebook-users 200 {"count": 1}


## Login with the same facebook user id should not create new identity
POST odin/test/facebook/login / {"access_token": "user_1"} 200
GET odin/test/facebook/validate_login /count-users 200 {"count": 1}
GET odin/test/facebook/validate_login /count-facebook-users 200 {"count": 1}


## login with new user
expect GET https://graph.facebook.com/me/ids_for_business?access_token=user_2 200 {
    "data": [
        {
            "id": "1235231612351235",
            "app": {
                "category": "Business",
                "link": "https://caveman-club/",
                "name": "Caveman Club",
                "id": "111111111111111"
            }
        }
    ]
}
expect GET https://graph.facebook.com/me?access_token=user_2&fields=name,email 200 {
    "name": "Fred 2 Flintstone",
    "email": "user_2@example.com",
    "id": "1235123512655"
}

POST odin/test/facebook/login / {"access_token": "user_2"} 200
GET odin/test/facebook/validate_login /count-users 200 {"count": 2}
GET odin/test/facebook/validate_login /count-facebook-users 200 {"count": 2}


## Duplicate email with username user 
expect GET https://graph.facebook.com/me/ids_for_business?access_token=exist_user 200 {
    "data": [
        {
            "id": "3401928358612345",
            "app": {
                "category": "Business",
                "link": "https://caveman-club/",
                "name": "Caveman Club",
                "id": "111111111111111"
            }
        }
    ]
}
expect GET https://graph.facebook.com/me?access_token=exist_user&fields=name,email 200 {
    "name": "exist_user",
    "email": "exist_user@example.com",
    "id": "3401928358612345"
}

## If user email already registered with Odin by username, create new user
POST odin/register / {"username": "exist_user", "password": "password1234", "email": "exist_user@example.com"} 201

GET odin/test/facebook/validate_login /count-users 200 {"count": 3}
GET odin/test/facebook/validate_login /count-facebook-users 200 {"count": 2}

POST odin/test/facebook/login / {"access_token": "exist_user"} 200

setting webserver views/validate-facebook-id {
    "view": "fostgres.sql",
    "configuration": {
        "sql": [
            {
                "return": "object",
                "path": [1],
                "GET": "SELECT id.*, cr.login, fc.facebook_user_id FROM odin.facebook_credentials fc, odin.identity id LEFT JOIN odin.credentials cr ON cr.identity_id=id.id WHERE fc.identity_id=id.id AND fc.facebook_user_id=$1"
            }
        ]
    }
}

GET validate-facebook-id /3401928358612345 200 {
    "login": null, 
    "facebook_user_id": "3401928358612345",
    "email": "exist_user@example.com",
    "full_name": "exist_user"
}

GET odin/test/facebook/validate_login /count-users 200 {"count": 4}
GET odin/test/facebook/validate_login /count-facebook-users 200 {"count": 3}

setting webserver views/odin/test/google/login {
    "view": "odin.google.login",
    "configuration": {
        "expires": {
            "hours": 72
        }
    }
}

expect GET https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=login_via_gp 200 {
    "aud": "111111111111111",
    "sub": "login_via_gp",
    "name": "Test Uesr",
    "email": "login_via_gp@example.com"    
}

POST odin/test/google/login / {"access_token": "login_via_gp"} 200

GET odin/test/facebook/validate_login /count-users 200 {"count": 5}
GET odin/test/facebook/validate_login /count-facebook-users 200 {"count": 3}


# Duplicate email with google user
expect GET https://graph.facebook.com/me/ids_for_business?access_token=login_via_gp 200 {
    "data": [
        {
            "id": "12356126123612",
            "app": {
                "category": "Business",
                "link": "https://caveman-club/",
                "name": "Caveman Club",
                "id": "111111111111111"
            }
        }
    ]
}
expect GET https://graph.facebook.com/me?access_token=login_via_gp&fields=name,email 200 {
    "name": "login_via_gp",
    "email": "login_via_gp@example.com",
    "id": "12356126123612"
}

## If user email already registered with Odin by google, return 200 add facebook credential to registered user 
POST odin/test/facebook/login / {"access_token": "login_via_gp"} 200

setting webserver views/validate-facebook-id {
    "view": "fostgres.sql",
    "configuration": {
        "sql": [
            {
                "return": "object",
                "path": [1],
                "GET": "SELECT id.*, fc.facebook_user_id, gc.google_user_id FROM odin.google_credentials gc, odin.facebook_credentials fc, odin.identity id WHERE gc.identity_id=id.id AND fc.identity_id=id.id AND fc.facebook_user_id=$1"
            }
        ]
    }
}

GET validate-facebook-id /12356126123612 200 {
    "facebook_user_id": "12356126123612",
    "google_user_id": "login_via_gp",
    "email": "login_via_gp@example.com",
    "full_name": "login_via_gp"
}

## facebook credentials added to exists user then number of users not increase
GET odin/test/facebook/validate_login /count-users 200 {"count": 5}
GET odin/test/facebook/validate_login /count-facebook-users 200 {"count": 4}


## Duplicate email with no credential user
expect GET https://graph.facebook.com/me/ids_for_business?access_token=duplicate-email-user 200 {
    "data": [
        {
            "id": "222222222222222",
            "app": {
                "category": "Business",
                "link": "https://bowling-friday/",
                "name": "The Bowling Fridy",
                "id": "222222222222222"
            }
        }
    ]
}
expect GET https://graph.facebook.com/me?access_token=duplicate-email-user&fields=name,email 200 {
    "name": "test-user-email",
    "id": "222222222222222",
    "email": "duplicate-email-user@example.com"
}

sql.insert odin.identity {
    "id": "duplicate-email-user",
    "full_name": "duplicate-email-user",
    "email": "duplicate-email-user@example.com"
}
GET odin/test/facebook/validate_login /count-users 200 {"count": 6}
GET odin/test/facebook/validate_login /count-facebook-users 200 {"count": 4}

## If user email already registered with Odin with no credential, return 200 create new user 
POST odin/test/facebook/login / {"access_token": "duplicate-email-user"} 200

setting webserver views/validate-facebook-id {
    "view": "fostgres.sql",
    "configuration": {
        "sql": [
            {
                "return": "object",
                "path": [1],
                "GET": "SELECT id.*, fc.facebook_user_id FROM odin.facebook_credentials fc, odin.identity id WHERE fc.identity_id=id.id AND fc.facebook_user_id=$1"
            }
        ]
    }
}

GET validate-facebook-id /222222222222222 200 {
    "facebook_user_id": "222222222222222",
    "email": "duplicate-email-user@example.com",
    "full_name": "test-user-email"
}

GET odin/test/facebook/validate_login /count-users 200 {"count": 7}
GET odin/test/facebook/validate_login /count-facebook-users 200 {"count": 5}


## Enable opts/installation-id
odin.sql.file (module.path.join ../Schema/opts/installation-id/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/installation-id/003-alter-ledgers.blue.sql)

## test-installation
expect GET https://graph.facebook.com/me/ids_for_business?access_token=test-installation 200 {
    "data": [
        {
            "id": "test-installation",
            "app": {
                "category": "Business",
                "link": "https://caveman-club/",
                "name": "Caveman Club",
                "id": "111111111111111"
            }
        }
    ]
}
expect GET https://graph.facebook.com/me?access_token=test-installation&fields=name,email 200 {
    "name": "test-installation",
    "email": "test-installation@example.com",
    "id": "test-installation"
}

POST odin/test/facebook/login / {"access_token": "test-installation", "installation_id": "INSTALL01"} 200
GET odin/test/facebook/validate_login /user/test-installation 200 {"installation_id": "INSTALL01"}

POST odin/test/facebook/login / {"access_token": "test-installation", "installation_id": "INSTALL02"} 200
GET odin/test/facebook/validate_login /user/test-installation 200 {"installation_id": "INSTALL02"}

POST odin/test/facebook/login / {"access_token": "test-installation", "installation_id": null} 501
GET odin/test/facebook/validate_login /user/test-installation 200 {"installation_id": "INSTALL02"}

POST odin/test/facebook/login / {"access_token": "test-installation", "installation_id": ""} 501
GET odin/test/facebook/validate_login /user/test-installation 200 {"installation_id": "INSTALL02"}
