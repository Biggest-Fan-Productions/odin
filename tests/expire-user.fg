# The login API is mounted in the odin view as a special
# case in order to bypass the security check generally
# done in the odin/api view
GET odin /api/ 401 {"odin": {"login": "./login/"}}
GET odin /api/login/ 501

# Set up the database
odin.sql.file (module.path.join ../Schema/core/000-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/002-fix-login.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/logout/002-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/logout/003-fix-logout-count.blue.sql)
odin.user test password1234
odin.user tester password1234

# Expire user without log in should not work
DELETE odin/api /me/ 403

# Check that logging in and registering same user should not works
POST odin/login / {"username": "test", "password": "password1234"} 200
POST odin/register / {"username": "test", "password": "password1234", "email": "admin@example.com"} 501

# Mint a new JWT for out user
odin.jwt.authorization test password1234

# Check delete user works
DELETE odin/api /me/ 200
DELETE odin/api /me/ 403

# Check that user is actually expired
POST odin/login / {"username": "test", "password": "password1234"} 401

# Mint a new JWT for out user
set-path testserver.headers ["Authorization"] (cat "Bearer " "test-string")

# User that doesn't have right permission should not be able to expire
DELETE odin/api /me/ 403

# Other user should log in success
set jwt_user (POST odin/login / {"username": "tester", "password": "password1234"} 200)
set-path testserver.headers ["Authorization"] (cat "Bearer " (lookup jwt_user))
GET odin/api / 200

# Delete should not work after logged out
POST odin/api /logout/ {} 200
GET odin/api / 401
DELETE odin/api /me/ 403
