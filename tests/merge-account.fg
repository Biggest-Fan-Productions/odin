# Set up the database
# module Core
odin.sql.file (module.path.join ../Schema/core/000-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/core/002-add-merge-account.blue.sql)
# module Authn
odin.sql.file (module.path.join ../Schema/authn/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/002-fix-login.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/004-not-allow-merge-registered-to-guest.blue.sql)
# module Authz
odin.sql.file (module.path.join ../Schema/authz/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/authz/002-view-user_permission.blue.sql)
odin.sql.file (module.path.join ../Schema/authz/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/authz/004-merge-account-function.blue.sql)
# module App
odin.sql.file (module.path.join ../Schema/app/002-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/app/003-app-role.blue.sql)
odin.sql.file (module.path.join ../Schema/app/004-app-installation.blue.sql)
odin.sql.file (module.path.join ../Schema/app/005-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/app/006-merge-account-function.blue.sql)
odin.sql.file (module.path.join ../Schema/app/007-app-user-data.blue.sql)
odin.sql.file (module.path.join ../Schema/app/008-app-user-id.blue.sql)
odin.sql.file (module.path.join ../Schema/app/009-app-user-id-index.blue.sql)
# module opts/email
odin.sql.file (module.path.join ../Schema/opts/email/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/email/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/email/004-merge-account-function.blue.sql)
# module opts/facebook
odin.sql.file (module.path.join ../Schema/opts/facebook/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/facebook/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/facebook/004-merge-account-function.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/facebook/005-facebook-credentials-insert.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/facebook/006-not-allow-merge-registered-to-guest.blue.sql)
# module opts/forgotten-password
odin.sql.file (module.path.join ../Schema/opts/forgotten-password/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/forgotten-password/002-merge-account-function.blue.sql)
# module opts/full-name
odin.sql.file (module.path.join ../Schema/opts/full-name/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/full-name/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/full-name/004-merge-account-function.blue.sql)
# module opts/google
odin.sql.file (module.path.join ../Schema/opts/google/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/google/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/google/004-merge-account-function.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/google/005-google-credentials-insert.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/google/006-not-allow-merge-registered-to-guest.blue.sql)
# module opts/installation-id
odin.sql.file (module.path.join ../Schema/opts/installation-id/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/installation-id/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/installation-id/004-merge-account-function.blue.sql)
# module opts/logout
odin.sql.file (module.path.join ../Schema/opts/logout/002-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/logout/003-fix-logout-count.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/logout/004-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/logout/005-merge-account-function.blue.sql)

# This test also test view in ../views/merge.account.json
# merge-account should be under odin.app.secure
odin.user user1 user1
odin.user user2 user2
sql.insert odin.identity {"id": "open-app"}
sql.insert odin.app_ledger {
    "reference": "ref1",
    "app_id": "open-app",
    "app_name": "MyApp",
    "token": "APP_TOKEN",
    "redirect_url": "http://example.com",
    "access_policy": "OPEN",
    "data_sharing_policy": "ALL"
}
sql.insert odin.app_user_ledger {
    "reference": "ref1",
    "app_id": "open-app",
    "identity_id": "user2",
    "app_user_id": "app_user2"
}
GET test/merge-account/validate /app-user-ledger/user2 200 {"count": 1}

POST odin/merge-account / {"from_identity_id": "user1", "to_identity_id": "user2"} 401
setting odin "JWT secret" <JWT_SECRET>
set-path testserver.headers ["Authorization"] (cat "Bearer " (odin.jwt.mint {"sub": "app_user2", "iss": "http://odin.felspar.com/app/open-app"} <JWT_SECRET>open-app))
POST odin/merge-account / {"from_identity_id": "user1", "to_identity_id": "user2"} 200

# Test module Core
odin.user core1 core1
odin.user core2 core2
GET test/merge-account/validate /identity/core1 200 {"id": "core1"}
GET test/merge-account/validate /identity-record/core1 200 {"id": "core1"}
POST odin/merge-account / {"from_identity_id": "core1", "to_identity_id": "core2"} 200
GET test/merge-account/validate /identity/core1 404
GET test/merge-account/validate /identity-record/core1 200 {"id": "core1"}

## Check that we get all merge records
##      core1 -> core2
##      core3 -> core4
##      core4 -> core2
odin.user core3 core3
odin.user core4 core4
POST odin/merge-account / {"from_identity_id": "core3", "to_identity_id": "core4"} 200
POST odin/merge-account / {"from_identity_id": "core4", "to_identity_id": "core2"} 200
GET test/merge-account/validate /merge_record/core1/core2 200
GET test/merge-account/validate /merge_record/core3/core4 200
GET test/merge-account/validate /merge_record/core4/core2 200
## This should also mean that we have a record of `core3 -> core2`
GET test/merge-account/validate /merge_record/core3/core2 200
## Add a final merge and we should get a ton of new records
odin.user core5 core5
POST odin/merge-account / {"from_identity_id": "core2", "to_identity_id": "core5"} 200
## First the one for the merge we just did
GET test/merge-account/validate /merge_record/core2/core5 200
## And one for each of the previous merges
GET test/merge-account/validate /merge_record/core1/core5 200
GET test/merge-account/validate /merge_record/core3/core5 200
GET test/merge-account/validate /merge_record/core4/core5 200
GET test/merge-account/validate /merge_record/core3/core5 200


# Test module AuthN
# unregistered -> unregistered 200
# unregistered -> registered 200
# registered -> unregistered 500
# registered -> registered 500

# Case merge unregistered user with registered user
odin.user authn1 authn1
odin.user authn2 authn2 password123
GET test/merge-account/validate /credentials/authn1 404
GET test/merge-account/validate /credentials/authn2 200
GET test/merge-account/validate /identity/authn1 200 {"id": "authn1"}
GET test/merge-account/validate /identity-record/authn1 200 {"id": "authn1"}
POST odin/merge-account / {"from_identity_id": "authn1", "to_identity_id": "authn2"} 200
GET test/merge-account/validate /identity/authn1 404
# Case merge registered user with registered user
odin.user authn3 authn3 password123
odin.user authn4 authn4 password123
GET test/merge-account/validate /credentials/authn3 200
GET test/merge-account/validate /credentials/authn4 200
GET test/merge-account/validate /identity/authn3 200 {"id": "authn3"}
GET test/merge-account/validate /identity-record/authn3 200 {"id": "authn3"}
# TODO: Ideally we'd do this insert and catch the error rather than with the POST
POST odin/merge-account / {"from_identity_id": "authn3", "to_identity_id": "authn4"} 500
GET test/merge-account/validate /identity/authn3 200
# Case merge registered user with unregistered user
odin.user authn5 authn5 password123
odin.user authn6 authn6
GET test/merge-account/validate /credentials/authn5 200
GET test/merge-account/validate /credentials/authn6 404
POST odin/merge-account / {"from_identity_id": "authn5", "to_identity_id": "authn6"} 500

odin.user authn7 authn7
odin.user authn8 authn8
odin.user authn9 authn9 password123
POST odin/merge-account / {"from_identity_id": "authn7", "to_identity_id": "authn9"} 200
POST odin/merge-account / {"from_identity_id": "authn8", "to_identity_id": "authn9"} 200

# Test module AuthZ

# Test superuser matrix
#                   superuser   non superuser
#   superuser           500         500
#   non superuser       500         200

# Case from non superuser to superuser
odin.user authz1 authz1
odin.user authz2 authz2
sql.insert odin.identity_superuser_ledger {"reference": "ref1", "identity_id": "authz1", "superuser": false}
sql.insert odin.identity_superuser_ledger {"reference": "ref1", "identity_id": "authz2", "superuser": true}
POST odin/merge-account / {"from_identity_id": "authz1", "to_identity_id": "authz2"} 500
# Case from superuser to non superuser
odin.user authz3 authz3
odin.user authz4 authz4
sql.insert odin.identity_superuser_ledger {"reference": "ref1", "identity_id": "authz3", "superuser": true}
sql.insert odin.identity_superuser_ledger {"reference": "ref1", "identity_id": "authz4", "superuser": false}
POST odin/merge-account / {"from_identity_id": "authz3", "to_identity_id": "authz4"} 500
# Case from non superuser to superuser
odin.user authz5 authz5
odin.user authz6 authz6
sql.insert odin.identity_superuser_ledger {"reference": "ref1", "identity_id": "authz5", "superuser": true}
sql.insert odin.identity_superuser_ledger {"reference": "ref1", "identity_id": "authz6", "superuser": true}
POST odin/merge-account / {"from_identity_id": "authz5", "to_identity_id": "authz6"} 500
# Case from superuser to superuser
odin.user authz7 authz7
odin.user authz8 authz8
sql.insert odin.identity_superuser_ledger {"reference": "ref1", "identity_id": "authz7", "superuser": false}
sql.insert odin.identity_superuser_ledger {"reference": "ref1", "identity_id": "authz8", "superuser": false}
POST odin/merge-account / {"from_identity_id": "authz7", "to_identity_id": "authz8"} 200
GET test/merge-account/validate /identity/authz7 404

# Insert group
sql.insert odin.group_ledger {"reference": "ref2", "group_slug": "group1"}
sql.insert odin.group_ledger {"reference": "ref2", "group_slug": "group2"}
sql.insert odin.group_ledger {"reference": "ref2", "group_slug": "group3"}
# Case user has duplicate group
odin.user authz9 authz9
odin.user authz10 authz10
sql.insert odin.group_membership_ledger {"reference": "ref3", "group_slug": "group1", "identity_id": "authz9", "member": true}
sql.insert odin.group_membership_ledger {"reference": "ref3", "group_slug": "group3", "identity_id": "authz9", "member": true}
sql.insert odin.group_membership_ledger {"reference": "ref3", "group_slug": "group2", "identity_id": "authz10", "member": true}
sql.insert odin.group_membership_ledger {"reference": "ref3", "group_slug": "group3", "identity_id": "authz10", "member": true}
POST odin/merge-account / {"from_identity_id": "authz9", "to_identity_id": "authz10"} 500
# Case user has no duplicate group
odin.user authz11 authz11
odin.user authz12 authz12
sql.insert odin.group_membership_ledger {"reference": "ref3", "group_slug": "group1", "identity_id": "authz11", "member": true}
sql.insert odin.group_membership_ledger {"reference": "ref3", "group_slug": "group2", "identity_id": "authz12", "member": true}
POST odin/merge-account / {"from_identity_id": "authz11", "to_identity_id": "authz12"} 200
GET test/merge-account/validate /identity/authz7 404
GET test/merge-account/validate /group-membership/authz11/group1 404
GET test/merge-account/validate /group-membership/authz12/group1 200 {"group_slug": "group1", "identity_id": "authz12"}
GET test/merge-account/validate /group-membership/authz12/group2 200 {"group_slug": "group2", "identity_id": "authz12"}

# Test module app
# Insert app
odin.user app1 app1
odin.user app2 app2
odin.user app3 app3
sql.insert odin.app_ledger {"reference": "ref1", "app_id": "app1", "app_name": "app1", "access_policy": "INVITE_ONLY", "data_sharing_policy": "ALL"}
sql.insert odin.app_ledger {"reference": "ref1", "app_id": "app2", "app_name": "app2", "access_policy": "INVITE_ONLY", "data_sharing_policy": "ALL"}
sql.insert odin.app_ledger {"reference": "ref1", "app_id": "app3", "app_name": "app3", "access_policy": "INVITE_ONLY", "data_sharing_policy": "ALL"}
# Insert app_role
sql.insert odin.app_role_ledger {"reference": "ref2", "app_id": "app1", "role": "role1"}
sql.insert odin.app_role_ledger {"reference": "ref2", "app_id": "app2", "role": "role2"}
sql.insert odin.app_role_ledger {"reference": "ref2", "app_id": "app3", "role": "role3"}

# Case user has duplicate app
odin.user app_user1 app_user1
odin.user app_user2 app_user2
sql.insert odin.app_user_ledger {"reference": "ref3", "app_id": "app1", "identity_id": "app_user1", "app_user_id": "app1_app_user1"}
sql.insert odin.app_user_ledger {"reference": "ref3", "app_id": "app3", "identity_id": "app_user1", "app_user_id": "app3_app_user1"}
sql.insert odin.app_user_ledger {"reference": "ref3", "app_id": "app2", "identity_id": "app_user2", "app_user_id": "app2_app_user2"}
sql.insert odin.app_user_ledger {"reference": "ref3", "app_id": "app3", "identity_id": "app_user2", "app_user_id": "app3_app_user2"}
POST odin/merge-account / {"from_identity_id": "app_user1", "to_identity_id": "app_user2"} 200
GET test/merge-account/validate /identity/app_user1 404
GET test/merge-account/validate /app-user/app_user1/app1 404
GET test/merge-account/validate /app-user/app_user1/app2 404
GET test/merge-account/validate /app-user/app_user1/app3 404
GET test/merge-account/validate /app-user/app_user2/app1 200
GET test/merge-account/validate /app-user/app_user2/app2 200
GET test/merge-account/validate /app-user/app_user2/app3 200

# Case user has no duplicate app
odin.user app_user3 app_user3
odin.user app_user4 app_user4
sql.insert odin.app_user_ledger {"reference": "ref3", "app_id": "app1", "identity_id": "app_user3", "app_user_id": "app1_app_user3"}
sql.insert odin.app_user_ledger {"reference": "ref3", "app_id": "app2", "identity_id": "app_user4", "app_user_id": "app2_app_user4"}
sql.insert odin.app_user_role_ledger {"reference": "ref4", "app_id": "app1", "identity_id": "app_user3", "role": "role1"}
sql.insert odin.app_user_role_ledger {"reference": "ref4", "app_id": "app2", "identity_id": "app_user4", "role": "role2"}
sql.insert odin.app_user_installation_id_ledger {"reference": "ref4", "app_id": "app1", "identity_id": "app_user3", "installation_id": "install01"}
POST odin/merge-account / {"from_identity_id": "app_user3", "to_identity_id": "app_user4"} 200
GET test/merge-account/validate /identity/app_user3 404
GET test/merge-account/validate /app-user/app_user3/app1 404
GET test/merge-account/validate /app-user-role/app_user3/app1/role1 404
GET test/merge-account/validate /app-user/app_user4/app1 200 {"identity_id": "app_user4", "app_id": "app1"}
GET test/merge-account/validate /app-user/app_user4/app2 200 {"identity_id": "app_user4", "app_id": "app2"}
GET test/merge-account/validate /app-user-role/app_user4/app1/role1 200 {"identity_id": "app_user4", "app_id": "app1", "role": "role1"}
GET test/merge-account/validate /app-user-role/app_user4/app2/role2 200 {"identity_id": "app_user4", "app_id": "app2", "role": "role2"}

# Test module opts/email
# Case email of merged to user must no be affect from another user
odin.user t_email1 t_email1
odin.user t_email2 t_email2
sql.insert odin.identity_email_ledger {"reference": "ref1", "identity_id": "t_email1", "email": "t_email1@mail.com"}
sql.insert odin.identity_email_ledger {"reference": "ref1", "identity_id": "t_email2", "email": "t_email2@mail.com"}
GET test/merge-account/validate /identity/t_email2 200 {"id": "t_email2", "email": "t_email2@mail.com"}
POST odin/merge-account / {"from_identity_id": "t_email1", "to_identity_id": "t_email2"} 200
GET test/merge-account/validate /identity/t_email1 404
GET test/merge-account/validate /identity/t_email2 200 {"id": "t_email2", "email": "t_email2@mail.com"}

# Test module opts/facebook
# unregistered -> unregistered 200
# unregistered -> registered 200
# registered -> unregistered 500
# registered -> registered 500

# Case user can has multiple facebook_id
# Case unregistered -> registered
odin.user facebook1 facebook1
odin.user facebook2 facebook2
sql.insert odin.facebook_credentials_ledger {"reference": "ref1", "identity_id": "facebook2", "facebook_user_id": "fu1"}
sql.insert odin.facebook_credentials_ledger {"reference": "ref2", "identity_id": "facebook2", "facebook_user_id": "fu2"}
POST odin/merge-account / {"from_identity_id": "facebook1", "to_identity_id": "facebook2"} 200
GET test/merge-account/validate /identity/facebook1 404
GET test/merge-account/validate /facebook_credentials/facebook1/fu1 404
GET test/merge-account/validate /facebook_credentials/facebook2/fu1 200 {"identity_id": "facebook2", "facebook_user_id": "fu1"}
GET test/merge-account/validate /facebook_credentials/facebook2/fu2 200 {"identity_id": "facebook2", "facebook_user_id": "fu2"}
# Case registered -> unregistered
odin.user facebook3 facebook3
odin.user facebook4 facebook4
sql.insert odin.facebook_credentials_ledger {"reference": "ref1", "identity_id": "facebook3", "facebook_user_id": "fu3"}
POST odin/merge-account / {"from_identity_id": "facebook3", "to_identity_id": "facebook4"} 500
# Case registered -> registered
odin.user facebook5 facebook5
odin.user facebook6 facebook6
sql.insert odin.facebook_credentials_ledger {"reference": "ref1", "identity_id": "facebook5", "facebook_user_id": "fu5"}
sql.insert odin.facebook_credentials_ledger {"reference": "ref1", "identity_id": "facebook6", "facebook_user_id": "fu6"}
POST odin/merge-account / {"from_identity_id": "facebook5", "to_identity_id": "facebook6"} 500


# Test module opts/forgotten-password
# Case request_reset_password of merged to user must no be affect from another user
odin.user forgot1 forgot1
odin.user forgot2 forgot2 password2
sql.insert odin.identity_email_ledger {"reference": "ref1", "identity_id": "forgot1", "email": "forgot1@mail.com"}
sql.insert odin.identity_email_ledger {"reference": "ref1", "identity_id": "forgot2", "email": "forgot2@mail.com"}
sql.insert odin.request_reset_password_ledger {"reference": "ref2", "email": "forgot1@mail.com"}
sql.insert odin.request_reset_password_ledger {"reference": "ref3", "email": "forgot2@mail.com"}
GET test/merge-account/validate /credentials/forgot1 404
GET test/merge-account/validate /credentials_password_ledger/forgot2 200 {
    "columns": ["identity_id"], "rows": [["forgot2"]]
}
GET test/merge-account/validate /request_reset_password_ledger/ref2/forgot1@mail.com 200
GET test/merge-account/validate /request_reset_password_ledger/ref3/forgot2@mail.com 200
POST odin/merge-account / {"from_identity_id": "forgot1", "to_identity_id": "forgot2"} 200
GET test/merge-account/validate /request_reset_password_ledger/ref2/forgot1@mail.com 200
GET test/merge-account/validate /request_reset_password_ledger/ref2/forgot2@mail.com 404
GET test/merge-account/validate /request_reset_password_ledger/ref3/forgot2@mail.com 200
GET test/merge-account/validate /credentials_password_ledger/forgot2 200 {
    "columns": ["identity_id"], "rows": [["forgot2"]]
}

# Test module opts/full-name
# Case full-name of merged to user must no be affect from another user
odin.user f_name1 f_name1
odin.user f_name2 f_name2
sql.insert odin.identity_full_name_ledger {"reference": "ref1", "identity_id": "f_name1", "full_name": "f1 l1"}
sql.insert odin.identity_full_name_ledger {"reference": "ref1", "identity_id": "f_name2", "full_name": "f2 l2"}
GET test/merge-account/validate /identity/f_name2 200 {"id": "f_name2", "full_name": "f2 l2"}
POST odin/merge-account / {"from_identity_id": "f_name1", "to_identity_id": "f_name2"} 200
GET test/merge-account/validate /identity/f_name1 404
GET test/merge-account/validate /identity/f_name2 200 {"id": "f_name2", "full_name": "f2 l2"}

# Test module opts/google
# unregistered -> unregistered 200
# unregistered -> registered 200
# registered -> unregistered 500
# registered -> registered 500

# Case user can has multiple google_id
# Case unregistered -> registered
odin.user google1 google1
odin.user google2 google2
sql.insert odin.google_credentials_ledger {"reference": "ref1", "identity_id": "google2", "google_user_id": "go1"}
sql.insert odin.google_credentials_ledger {"reference": "ref2", "identity_id": "google2", "google_user_id": "go2"}
POST odin/merge-account / {"from_identity_id": "google1", "to_identity_id": "google2"} 200
GET test/merge-account/validate /identity/google1 404
GET test/merge-account/validate /google_credentials/google1/go1 404
GET test/merge-account/validate /google_credentials/google2/go1 200 {"identity_id": "google2", "google_user_id": "go1"}
GET test/merge-account/validate /google_credentials/google2/go2 200 {"identity_id": "google2", "google_user_id": "go2"}
# Case registered -> unregistered
odin.user google3 google3
odin.user google4 google4
sql.insert odin.google_credentials_ledger {"reference": "ref1", "identity_id": "google3", "google_user_id": "go3"}
POST odin/merge-account / {"from_identity_id": "google3", "to_identity_id": "google4"} 500
# Case registered -> registered
odin.user google5 google5
odin.user google6 google6
sql.insert odin.google_credentials_ledger {"reference": "ref1", "identity_id": "google5", "google_user_id": "go5"}
sql.insert odin.google_credentials_ledger {"reference": "ref1", "identity_id": "google6", "google_user_id": "go6"}
POST odin/merge-account / {"from_identity_id": "google5", "to_identity_id": "google6"} 500

# Test module opts/installation-id
# Case installation-id of merged to user must no be affect from another user
odin.user install1 install1
odin.user install2 install2
sql.insert odin.identity_installation_id_ledger {"reference": "ref1", "identity_id": "install1", "installation_id": "il001"}
sql.insert odin.identity_installation_id_ledger {"reference": "ref1", "identity_id": "install2", "installation_id": "il002"}
GET test/merge-account/validate /identity/install2 200 {"id": "install2", "installation_id": "il002"}
POST odin/merge-account / {"from_identity_id": "install1", "to_identity_id": "install2"} 200
GET test/merge-account/validate /identity/install1 404
GET test/merge-account/validate /identity/install2 200 {"id": "install2", "installation_id": "il002"}

# Test module opts/logout
# Case logout_count of merged to user must no be affect from another user
odin.user logout1 logout1
odin.user logout2 logout2 password1
sql.insert odin.logout_ledger {"reference": "ref1", "identity_id": "logout1"}
sql.insert odin.logout_ledger {"reference": "ref1", "identity_id": "logout2"}
sql.insert odin.logout_ledger {"reference": "ref2", "identity_id": "logout2"}
GET test/merge-account/validate /credentials/logout2 200 {"identity_id": "logout2", "logout_count": 2}
POST odin/merge-account / {"from_identity_id": "logout1", "to_identity_id": "logout2"} 200
GET test/merge-account/validate /identity/logout1 404
GET test/merge-account/validate /credentials/logout2 200 {"identity_id": "logout2", "logout_count": 2}

# Case test merge with non exist user
odin.user user_e01 user_e01
POST odin/merge-account / {"from_identity_id": "user_e01", "to_identity_id": "user_e02"} 500
POST odin/merge-account / {"from_identity_id": "user_e02", "to_identity_id": "user_e01"} 500
