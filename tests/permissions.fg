# Set up the database
odin.sql.file (module.path.join ../Schema/core/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/authz/001-initial.blue.sql)

# Set up test permissions and group
odin.permission test-perm "Test permission"
odin.permission not-granted "Another permission"
odin.group public "Public access"
odin.assign public test-perm create-group

# When not logged in get a 403 or 401
GET odin/api / 401 {"odin": {"my": {"permissions": "./me/permissions"}}}
GET odin/api /me/permissions 401
GET test/permission /not-granted/ 401

# Set up a user account
odin.user test-user
odin.membership test-user public
odin.jwt.authorization test-user

# Check the right permissions are granted
GET odin/api /me/permissions 200 {"columns": ["permission"],
    "rows": [["create-group"], ["test-perm"]]}

# Check the web API is also able to check the permissions
GET test/permission /create-group/ 200
GET test/permission /not-granted/ 403

# Set superuser and then check again
odin.superuser test-user
GET odin/api /me/permissions 200 {"columns": ["permission"],
    "rows": [["create-group"], ["create-user"], ["not-granted"], ["test-perm"]]}
GET test/permission /create-group/ 200
GET test/permission /not-granted/ 200

# Expire the account and make sure the permissions go away
odin.user.expire test-user
GET odin/api /me/permissions 200 {"columns": ["permission"], "rows": []}
GET test/permission /create-group/ 403
GET test/permission /not-granted/ 403
