# Set up the database
odin.sql.file (module.path.join ../Schema/core/000-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/core/002-add-merge-account.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/002-fix-login.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/004-not-allow-merge-registered-to-guest.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/full-name/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/full-name/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/full-name/004-merge-account-function.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/email/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/email/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/email/004-merge-account-function.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/email/005-email-not-unique.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/google/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/google/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/google/004-merge-account-function.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/google/005-google-credentials-insert.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/google/006-not-allow-merge-registered-to-guest.blue.sql)
odin.sql.file (module.path.join ../Schema/app/002-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/app/003-app-role.blue.sql)
odin.sql.file (module.path.join ../Schema/app/004-app-installation.blue.sql)
odin.sql.file (module.path.join ../Schema/app/005-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/app/006-merge-account-function.blue.sql)
odin.sql.file (module.path.join ../Schema/app/007-app-user-data.blue.sql)
odin.sql.file (module.path.join ../Schema/app/008-app-user-id.blue.sql)
odin.sql.file (module.path.join ../Schema/app/009-app-user-id-index.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/facebook/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/facebook/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/facebook/004-merge-account-function.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/facebook/005-facebook-credentials-insert.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/facebook/006-not-allow-merge-registered-to-guest.blue.sql)

setting odin "JWT secret" <JWT_SECRET>

## ## Register app
sql.insert odin.identity {"id": "open-app"}
sql.insert odin.app_ledger {
    "reference": "ref1",
    "app_id": "open-app",
    "app_name": "MyApp",
    "token": "APP_TOKEN",
    "redirect_url": "http://example.com",
    "access_policy": "OPEN",
    "data_sharing_policy": "ALL"
}
sql.insert odin.app_user_ledger {
    "reference": "ref1",
    "app_id": "open-app",
    "identity_id": "open-app",
    "app_user_id": "app_user_open_app"
}

## The application counts as a user
GET odin/test/google/validate_login /count-users 200 {"count": 1}
GET odin/test/google/validate_login /count-google-users 200 {"count": 0}

## Set up a new installation
setting webserver views/test/app/installation {
            "view": "odin.app.installation",
            "configuration": {"expires": {"hours": 72}}
        }
setting webserver views/test/sec/installation {
        "view": "odin.app.secure",
        "configuration": {
            "secure": "test/app/installation",
            "unsecure": "fost.response.403"
        }
    }

## ## Registration of new user
set-path testserver.headers ["Authorization"] (cat "Bearer " (odin.jwt.mint {"sub": "open-app", "iss": "http://odin.felspar.com/app/open-app"} <JWT_SECRET>open-app))
set-path testserver.headers ["Authorization"] (cat "Bearer " (POST test/sec/installation / {"installation_id": "ins01"} 401))
set-path testserver.headers ["Authorization"] (cat "Bearer " (odin.jwt.mint {"sub": "app_user_open_app", "iss": "http://odin.felspar.com/app/open-app"} <JWT_SECRET>open-app))
set-path testserver.headers ["Authorization"] (cat "Bearer " (POST test/sec/installation / {"installation_id": "ins01"} 201))

setting webserver views/odin/test/sec/google/login/ok {
        "view": "odin.app.secure",
        "configuration": {
            "secure": {
                "view": "odin.app.google.login",
                "configuration": {
                    "expires": {"hours": 72},
                    "google-mock": "OK"
                }
            },
            "unsecure": "fost.response.403"
        }
    }

## The installation counts as an extra user
GET odin/test/google/validate_login /count-users 200 {"count": 2}
GET odin/test/google/validate_login /count-google-users 200 {"count": 0}

## Disallowed methods return a 405
GET odin/test/sec/google/login/ok / 405
PUT odin/test/sec/google/login/ok / {"installation_id": "ins01", "access_token": "user_1"} 405

## Need required fields
POST odin/test/sec/google/login/ok / {} 501

## Login with Google ID that has not been seen before
set-path testserver.headers ["Authorization"] (cat "Bearer " (POST odin/test/sec/google/login/ok / {"access_token": "user_1"} 200))
GET odin/test/google/validate_login /count-users 200 {"count": 2}
GET odin/test/google/validate_login /count-google-users 200 {"count": 1}

## Login again later on should be just fine
set-path testserver.headers ["Authorization"] (cat "Bearer " (POST odin/test/sec/google/login/ok / {"access_token": "user_1"} 200))
GET odin/test/google/validate_login /count-users 200 {"count": 2}
GET odin/test/google/validate_login /count-google-users 200 {"count": 1}


## ## Change of device
##
## Create a new installation ID. This should simulate our existing FB
## user switching to a new device. Go back to the application JWT
## and then use that to register the new device.
set-path testserver.headers ["Authorization"] (cat "Bearer " (odin.jwt.mint {"sub": "open-app", "iss": "http://odin.felspar.com/app/open-app"} <JWT_SECRET>open-app))
set-path testserver.headers ["Authorization"] (cat "Bearer " (POST test/sec/installation / {"installation_id": "ins02"} 401))
set-path testserver.headers ["Authorization"] (cat "Bearer " (odin.jwt.mint {"sub": "app_user_open_app", "iss": "http://odin.felspar.com/app/open-app"} <JWT_SECRET>open-app))
set-path testserver.headers ["Authorization"] (cat "Bearer " (POST test/sec/installation / {"installation_id": "ins02"} 201))

## The installation counts as an extra user
GET odin/test/google/validate_login /count-users 200 {"count": 3}
GET odin/test/google/validate_login /count-google-users 200 {"count": 1}

## Login with Google ID that *has* been seen before
set-path testserver.headers ["Authorization"] (cat "Bearer " (POST odin/test/sec/google/login/ok / {"access_token": "user_1"} 200))

## There is no new Google user
GET odin/test/google/validate_login /count-users 200 {"count": 2}
GET odin/test/google/validate_login /count-google-users 200 {"count": 1}


## ## Pre-registered user
##
## This case comes up when a user who is already on our systems with
## a Google a/c starts to use another application. In this case we need
## to perform a successful merge of the installation ID into the old
## user account.

sql.insert odin.identity {"id": "new-app"}
sql.insert odin.app_ledger {
    "reference": "ref2",
    "app_id": "new-app",
    "app_name": "MyNewApp",
    "token": "APP_TOKEN",
    "redirect_url": "http://example.com/new",
    "access_policy": "OPEN",
    "data_sharing_policy": "ALL"
}
sql.insert odin.app_user_ledger {
    "reference": "ref2",
    "app_id": "new-app",
    "identity_id": "new-app",
    "app_user_id": "app_user_new_app"
}

## As before, we set up an application JWT to be used to bootstrap
## the process, and our user then starts to use it (anonymously).
set-path testserver.headers ["Authorization"] (cat "Bearer " (odin.jwt.mint {"sub": "new-app", "iss": "http://odin.felspar.com/app/new-app"} <JWT_SECRET>new-app))
set-path testserver.headers ["Authorization"] (cat "Bearer " (POST test/sec/installation / {"installation_id": "ins03"} 401))
set-path testserver.headers ["Authorization"] (cat "Bearer " (odin.jwt.mint {"sub": "app_user_new_app", "iss": "http://odin.felspar.com/app/new-app"} <JWT_SECRET>new-app))
set-path testserver.headers ["Authorization"] (cat "Bearer " (POST test/sec/installation / {"installation_id": "ins03"} 201))

## This leads to two new users (one for the application, one for the
## new installation.
GET odin/test/google/validate_login /count-users 200 {"count": 4}
GET odin/test/google/validate_login /count-google-users 200 {"count": 1}

## A Google login now merges the new installation with the old user
set-path testserver.headers ["Authorization"] (cat "Bearer " (POST odin/test/sec/google/login/ok / {"access_token": "user_1"} 200))

## There is no new Google user, but the new installation ID has
## been merged to the old identity so there is one fewer user.
GET odin/test/google/validate_login /count-users 200 {"count": 3}
GET odin/test/google/validate_login /count-google-users 200 {"count": 1}

## Create user with email that duplicate with google user need to login
sql.insert odin.identity {
    "id": "duplicate-email-user",
    "full_name": "duplicate-email-user",
    "email": "duplicate-email-user@example.com"
}
GET odin/test/google/validate_login /count-users 200 {"count": 4}
GET odin/test/google/validate_login /count-google-users 200 {"count": 1}
sql.insert odin.app_user_ledger {
    "reference": "ref1",
    "app_id": "open-app",
    "identity_id": "duplicate-email-user",
    "app_user_id": "app-duplicate-email-user"
}

## As before, we set up an application JWT to be used to bootstrap
## the process, and our user then starts to use it (anonymously).
set-path testserver.headers ["Authorization"] (cat "Bearer " (odin.jwt.mint {"sub": "app_user_new_app", "iss": "http://odin.felspar.com/app/new-app"} <JWT_SECRET>new-app))
set-path testserver.headers ["Authorization"] (cat "Bearer " (POST test/sec/installation / {"installation_id": "ins04"} 201))

GET odin/test/google/validate_login /count-users 200 {"count": 5}
GET odin/test/google/validate_login /count-google-users 200 {"count": 1}

## If user email already registered with Odin with no credential, return 200 create new user
POST odin/test/sec/google/login/ok / {"access_token": "duplicate-email-user"} 200

setting webserver views/validate-google-id {
    "view": "fostgres.sql",
    "configuration": {
        "sql": [
            {
                "return": "object",
                "path": [1],
                "GET": "SELECT * FROM odin.google_credentials gc, odin.identity id WHERE gc.identity_id=id.id AND gc.google_user_id=$1"
            }
        ]
    }
}

GET validate-google-id /duplicate-email-user 200 {
    "google_user_id": "duplicate-email-user",
    "email": "duplicate-email-user@example.com",
    "full_name": "Test User"
}

GET odin/test/google/validate_login /count-users 200 {"count": 5}
GET odin/test/google/validate_login /count-google-users 200 {"count": 2}

setting odin "Facebook API Endpoint" "https://graph.facebook.com/v3.2"
setting odin "Facebook" {
    "main": "111111111111111",
    "allowed": ["111111111111111", "222222222222222"]
}

setting webserver views/odin/test/sec/facebook/login/ok {
    "view": "odin.app.secure",
    "configuration": {
        "secure": {
        "view": "odin.app.facebook.login",
            "configuration": {
                "expires": {
                    "hours": 72
                },
                "facebook-mock": {
                    "ids_for_business": {
                        "status": 200,
                        "headers": {},
                        "body": {
                            "data": [
                                {
                                    "id": "112233445566778",
                                    "app": {
                                        "category": "Business",
                                        "link": "https://caveman-club/",
                                        "name": "Caveman Club",
                                        "id": "111111111111111"
                                    }
                                }
                            ]
                        }
                    },
                    "me": {
                        "body": {
                            "name": "Fred Flintstone",
                            "email": "duplicate-email-with-facebook-user@example.com",
                            "id": "112233445566778"
                        }
                    }
                }
            }
        },
        "unsecure": "fost.response.403"
    }
}

set-path testserver.headers ["Authorization"] (cat "Bearer " (odin.jwt.mint {"sub": "app_user_new_app", "iss": "http://odin.felspar.com/app/new-app"} <JWT_SECRET>new-app))
set-path testserver.headers ["Authorization"] (cat "Bearer " (POST test/sec/installation / {"installation_id": "ins005"} 201))
POST odin/test/sec/facebook/login/ok / {"access_token": "duplicate-email-with-facebook-user"} 200

GET odin/test/google/validate_login /count-users 200 {"count": 6}
GET odin/test/google/validate_login /count-google-users 200 {"count": 2}

set-path testserver.headers ["Authorization"] (cat "Bearer " (odin.jwt.mint {"sub": "app_user_new_app", "iss": "http://odin.felspar.com/app/new-app"} <JWT_SECRET>new-app))
set-path testserver.headers ["Authorization"] (cat "Bearer " (POST test/sec/installation / {"installation_id": "ins05"} 201))

GET odin/test/google/validate_login /count-users 200 {"count": 7}
GET odin/test/google/validate_login /count-google-users 200 {"count": 2}

setting webserver views/odin/app_secure {
    "view": "odin.app.secure",
    "configuration": {
        "secure": "fost.response.200",
        "unsecure": "fost.response.403"
    }    
}

## If user email already registered with Odin by facebook, return 200 add google credential to that registered user 
set-path testserver.headers ["Authorization"] (cat "Bearer " (POST odin/test/sec/google/login/ok / {"access_token": "duplicate-email-with-facebook-user"} 200))
GET odin/app_secure / 200

setting webserver views/validate-google-id {
    "view": "fostgres.sql",
    "configuration": {
        "sql": [
            {
                "return": "object",
                "path": [1],
                "GET": "SELECT id.*, fc.facebook_user_id, gc.google_user_id FROM odin.google_credentials gc, odin.facebook_credentials fc, odin.identity id WHERE gc.identity_id=id.id AND fc.identity_id=id.id AND gc.google_user_id=$1"
            }
        ]
    }
}

GET validate-google-id /duplicate-email-with-facebook-user 200 {
    "facebook_user_id": "112233445566778",
    "google_user_id": "duplicate-email-with-facebook-user",
    "email": "duplicate-email-with-facebook-user@example.com",
    "full_name": "Test User"
}

## There is no new Google user, but the new installation ID has
## been merged to the old identity so there is one fewer user.
GET odin/test/google/validate_login /count-users 200 {"count": 6}
GET odin/test/google/validate_login /count-google-users 200 {"count": 3}

## If user email already registered with Odin by username, create new user
POST odin/register / {"username": "exist_user", "password": "password1234", "email": "exist_user@example.com"} 201

GET odin/test/google/validate_login /count-users 200 {"count": 7}
GET odin/test/google/validate_login /count-google-users 200 {"count": 3}

set-path testserver.headers ["Authorization"] (cat "Bearer " (odin.jwt.mint {"sub": "app_user_new_app", "iss": "http://odin.felspar.com/app/new-app"} <JWT_SECRET>new-app))
set-path testserver.headers ["Authorization"] (cat "Bearer " (POST test/sec/installation / {"installation_id": "ins06"} 201))

GET odin/test/google/validate_login /count-users 200 {"count": 8}
GET odin/test/google/validate_login /count-google-users 200 {"count": 3}

POST odin/test/sec/google/login/ok / {"access_token": "exist_user"} 200

setting webserver views/validate-google-id {
    "view": "fostgres.sql",
    "configuration": {
        "sql": [
            {
                "return": "object",
                "path": [1],
                "GET": "SELECT id.*, cr.login, gc.google_user_id FROM odin.google_credentials gc, odin.identity id LEFT JOIN odin.credentials cr ON cr.identity_id=id.id WHERE gc.identity_id=id.id AND gc.google_user_id=$1"
            }
        ]
    }
}

GET validate-google-id /exist_user 200 {
    "login": null, 
    "google_user_id": "exist_user",
    "email": "exist_user@example.com",
    "full_name": "Test User"
}

GET odin/test/google/validate_login /count-users 200 {"count": 8}
GET odin/test/google/validate_login /count-google-users 200 {"count": 4}
