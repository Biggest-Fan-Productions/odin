# The login API is mounted in the odin view as a special
# case in order to bypass the security check generally
# done in the odin/api view
GET odin /api/ 401 {"odin": {"login": "./login/"}}
GET odin /api/login/ 501

# It's also its own view
GET odin/login / 501

# Set up the database
odin.sql.file (module.path.join ../Schema/core/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/001-initial.blue.sql)
odin.user test password1234

# Check that logging in works
POST odin/login / {"username": "test", "password": "password1234"} 200
POST odin/login / {"username": "test", "password": "password12345"} 401
POST odin/login / {"username": "tester", "password": "password1234"} 401

# User's can't change their passwords when not logged in
POST odin/api /me/password {"old-password": "password1234", "new-password": "password1235"} 401 {"message": "No user is logged in"}

odin.jwt.authorization test

# User must submit correct old password and a new password and new password is long enough
POST odin/api /me/password {"new-password": "password1235"} 403 {"message": "Must supply both old and new password"}
POST odin/api /me/password {"old-password": "password1235"} 403 {"message": "Must supply both old and new password"}
POST odin/api /me/password {"old-password": "pw", "new-password": "password1235"} 403 {"message": "Wrong password"}
POST odin/api /me/password {"old-password": "password1234", "new-password": "pw"} 403 {"message": "New password is too short"}

# Check that we can change the password, and that it then works
POST odin/api /me/password {"old-password": "password1234", "new-password": "password1235"} 200
POST odin/login / {"username": "test", "password": "password1234"} 401
POST odin/login / {"username": "test", "password": "password1235"} 200

