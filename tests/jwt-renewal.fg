# Set up the database
odin.sql.file (module.path.join ../Schema/core/000-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/core/002-add-merge-account.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/002-fix-login.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/app/002-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/app/003-app-role.blue.sql)
odin.sql.file (module.path.join ../Schema/app/004-app-installation.blue.sql)
odin.sql.file (module.path.join ../Schema/app/005-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/app/006-merge-account-function.blue.sql)

setting odin "JWT secret" "<JWT_SECRET>"

# Use APP JWT
setting webserver views/test/app-secure/renew-jwt {
        "view": "odin.app.secure",
        "configuration": {
            "secure": {
                "view": "odin.jwt.renewal",
                "configuration": {
                    "expires": {"hours": 72}
                }
            },
            "unsecure": {
                "view": "fost.response.401",
                "configuration": {
                    "schemes": {
                        "Bearer": {}
                    }
                }
            }
        }
    }

# Test cannot get data if user is not authorized
GET test/app-secure/renew-jwt  / 401

sql.insert odin.identity {"id": "app01"}
sql.insert odin.app_ledger {
    "reference": "ref1",
    "app_id": "app01",
    "app_name": "OpenApp",
    "token": "APP_TOKEN",
    "redirect_url": "http://example.com",
    "access_policy": "OPEN",
    "data_sharing_policy": "ALL"
}

odin.user user01 user01 password1234
set app_jwt (odin.jwt.mint {"sub": "user01", "iss": "http://odin.felspar.com/app/app01"} <JWT_SECRET>app01)
set-path testserver.headers ["Authorization"] (cat "Bearer " (lookup app_jwt))

# Can only use with GET method
POST test/app-secure/renew-jwt / {} 405

# New JWT can use without error
set new_app_jwt (GET test/app-secure/renew-jwt / 200)
set-path testserver.headers ["Authorization"] (cat "Bearer " (lookup new_app_jwt))
GET test/app-secure/renew-jwt / 200


# Use non APP JWT
setting webserver views/test/secure/renew-jwt {
        "view": "odin.secure",
        "configuration": {
            "secure": {
                "view": "odin.jwt.renewal",
                "configuration": {
                    "expires": {"hours": 72}
                }
            },
            "unsecure": {
                "view": "fost.response.401",
                "configuration": {
                    "schemes": {
                        "Bearer": {}
                    }
                }
            }
        }
    }

set-path testserver.headers ["Authorization"] (cat "Bearer ")
# Test cannot get data if user is not authorized
GET test/secure/renew-jwt / 401

odin.user user02 user02 password1234
set jwt (POST odin/login / {"username": "user02", "password": "password1234"} 200)
set-path testserver.headers ["Authorization"] (cat "Bearer " (lookup jwt))

# Can only use with GET method
PUT test/secure/renew-jwt / {} 405

# New JWT can use without error
set new_jwt (GET test/secure/renew-jwt / 200)
set-path testserver.headers ["Authorization"] (cat "Bearer " (lookup new_jwt))
GET test/secure/renew-jwt / 200

setting webserver views/test/renew-jwt {
        "view": "odin.jwt.renewal",
        "configuration": {
            "expires": {"hours": 72}
        }
    }

# Should return error if not config renew JWT view under secure view
GET test/renew-jwt / 501
