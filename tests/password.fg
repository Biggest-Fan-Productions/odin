# Set up the database
odin.sql.file (module.path.join ../Schema/core/000-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/core/002-add-merge-account.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/002-fix-login.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/logout/002-initial.blue.sql)
odin.user test password1234

# User's can't change their passwords when not logged in
POST odin/api /me/password {"old-password": "password1234", "new-password": "password1235"} 401 {"message": "No user is logged in"}

odin.jwt.authorization test password1234

# User must submit correct old password and a new password and new password is long enough
POST odin/api /me/password {"new-password": "password1235"} 403 {"message": "Must supply both old and new password"}
POST odin/api /me/password {"old-password": "password1235"} 403 {"message": "Must supply both old and new password"}
POST odin/api /me/password {"old-password": "pw", "new-password": "password1235"} 403 {"message": "Wrong password"}
POST odin/api /me/password {"old-password": "password1234", "new-password": "pw"} 403 {"message": "New password is too short"}

# Check that we can change the password, and that it then works
POST odin/api /me/password {"old-password": "password1234", "new-password": "password1235"} 200
# And should automatically log user out
GET odin/api / 401

POST odin/login / {"username": "test", "password": "password1234"} 401
POST odin/login / {"username": "test", "password": "password1235"} 200

odin.jwt.authorization test password1235
# And do a second change and check that too
POST odin/api /me/password {"old-password": "password1235", "new-password": "password1236"} 200
POST odin/login / {"username": "test", "password": "password1235"} 401
POST odin/login / {"username": "test", "password": "password1236"} 200

# Set an explicit hashing process and then use it to log in
odin.hash test "NTA4ZjE3OTVkOTM0MmQxMmE1YjljZmE0YzNjMTgxY2MwZDNmNmFiYmU5NzQwMDE1MzRkZTNiNWIwMTRjY2VlMA==" {"name": "ripemd256", "salt": "----ProjectC534---/4y2krF38"}
POST odin/login / {"username": "test", "password": "1234"} 200


# Reset forgotten password should validate input and methods
GET odin.password.reset-forgotten / 501
POST odin.password.reset-forgotten / {"some_random_token": "Some token", "username": "user12"} 403
POST odin.password.reset-forgotten / {"username": "user12"} 403
POST odin.password.reset-forgotten / {"reset-password-token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MzEzMDQzNDIsInN1YiI6Im5leW1hcjEwIn0.4SZhjdzeTZ1Xvcy8RX1FBFTHqsYjXmIoxZq03vQbZts",
  "username": "user12"} 403

# Reset forgotten password should return error when username does not exist
POST odin.password.reset-forgotten / {"reset-password-token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MzEzMDQzNDIsInN1YiI6Im5leW1hcjEwIn0.4SZhjdzeTZ1Xvcy8RX1FBFTHqsYjXmIoxZq03vQbZts",
  "username": "test"} 403

# Reset forgotten password should successfully set new password
# set p {"new-password": "new_password_1234"}
# set-path p ["reset-password-token"] (odin.jwt.mint.password-reset test)
# POST odin.password.reset-forgotten / (lookup p) 200
# POST odin/login / {"username": "test", "password": "password1234"} 401
# POST odin/login / {"username": "test", "password": "new_password_1234"} 200

# Reset forgotten password should logout the already logged in user
# odin.user test2 password1234
# odin.jwt.authorization test2 password1234
# GET odin/api / 200

# set p {"new-password": "new_password_1234"}
# set-path p ["reset-password-token"] (odin.jwt.mint.password-reset test2)
# POST odin.password.reset-forgotten / (lookup p) 200
# GET odin/api / 401
