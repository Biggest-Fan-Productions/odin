# Set up the database
odin.sql.file (module.path.join ../Schema/core/000-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/core/002-add-merge-account.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/email/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/email/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/email/004-merge-account-function.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/002-fix-login.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/app/002-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/app/003-app-role.blue.sql)


# TODO: Test GET that serve static file
# GET odin/app /login/invite-only-app/ 200

# Set up new users
odin.user owner owner password1234
odin.user invited1 invited1 password1234
odin.user invited2 invited2 password12345 inv2@inv.com
odin.user player2 player2 password1234

# Register invite-only-app
sql.insert odin.identity {"id": "invite-only-app"}
sql.insert odin.app_ledger {
    "reference": "ref1",
    "app_id": "invite-only-app",
    "app_name": "MyApp",
    "token": "APP_TOKEN",
    "redirect_url": "http://example.com",
    "access_policy": "INVITE_ONLY",
    "data_sharing_policy": "ALL"
}

sql.insert odin.app_user_ledger {"reference": "ref1", "app_id": "invite-only-app", "identity_id": "invited1"}
sql.insert odin.app_user_ledger {"reference": "ref2", "app_id": "invite-only-app", "identity_id": "invited2"}

# Validate payload
POST odin/app /login/invite-only-app/ {} 501
POST odin/app /login/invite-only-app/app02/ {} 501
POST odin/app /login/ {"username": "invited1", "password": "password1234"} 501
POST odin/app /login/invite-only-app/ {"username": "invited1"} 501
POST odin/app /login/invite-only-app/ {"password": "password1234"} 501

# Only registered user can login to App
POST odin/app /login/invite-only-app/ {"username": "random_player", "password": "random_pwd"} 501

# Return error when app does not exists
POST odin/app /login/random_app/ {"username": "invited1", "password": "password1234"} 501

# Return redirect url if successfully login
POST odin/app /login/invite-only-app/ {"username": "invited1", "password": "password1234"} 200 {"scheme": "Bearer", "redirect_url": "http://example.com"}
POST odin/app /login/invite-only-app/ {"username": "inv2@inv.com", "password": "password12345"} 200 {"scheme": "Bearer", "redirect_url": "http://example.com"}

# For now login should fail if someone takeover someone's email and their username but passes if uses their unique email
odin.user invited3 inv2@inv.com password123456 inv3@inv.com
sql.insert odin.app_user_ledger {"reference": "ref3", "app_id": "invite-only-app", "identity_id": "invited3"}

POST odin/app /login/invite-only-app/ {"username": "inv2@inv.com", "password": "password123456"} 501
POST odin/app /login/invite-only-app/ {"username": "inv3@inv.com", "password": "password123456"} 200

# Return error to uninvited user
POST odin/app /login/invite-only-app/ {"username": "player2", "password": "password1234"} 501

# Enable OPEN app access policy + app installation ID
odin.sql.file (module.path.join ../Schema/app/004-app-installation.blue.sql)
odin.sql.file (module.path.join ../Schema/app/005-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/app/006-merge-account-function.blue.sql)

sql.insert odin.identity {"id": "open-app"}
sql.insert odin.app_ledger {
    "reference": "ref1",
    "app_id": "open-app",
    "app_name": "OpenApp",
    "token": "APP_TOKEN",
    "redirect_url": "http://example.com",
    "access_policy": "OPEN",
    "data_sharing_policy": "ALL"
}

odin.user random-player random-player password1234
POST odin/app /login/open-app/ {"username": "random-player", "password": "password1234"} 200
